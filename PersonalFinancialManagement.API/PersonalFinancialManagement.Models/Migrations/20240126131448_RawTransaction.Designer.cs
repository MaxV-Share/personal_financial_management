// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonalFinancialManagement.Models.DbContexts;

#nullable disable

namespace PersonalFinancialManagement.Models.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240126131448_RawTransaction")]
    partial class RawTransaction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<string>("Deleted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deleted");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_currencies");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_currencies_id");

                    b.ToTable("currencies", (string)null);
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.Identities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[normalized_name] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.Identities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.Identities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("full_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[normalized_user_name] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.Identities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.Identities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.Identities.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.Identities.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.PaymentAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("currency_id");

                    b.Property<string>("Deleted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deleted");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("icon");

                    b.Property<decimal?>("InitialMoney")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("initial_money");

                    b.Property<bool?>("IsReport")
                        .HasColumnType("bit")
                        .HasColumnName("is_report");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("type_id");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_payment_accounts");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("ix_payment_accounts_currency_id");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_payment_accounts_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_payment_accounts_type_id");

                    b.ToTable("payment_accounts", (string)null);
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.PaymentAccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<string>("Deleted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deleted");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_payment_account_types");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_payment_account_types_id");

                    b.ToTable("payment_account_types", (string)null);
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.RawTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<double>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<double>("Balance")
                        .HasColumnType("float")
                        .HasColumnName("balance");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<string>("Deleted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deleted");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("MailId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("mail_id");

                    b.Property<string>("No")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("no");

                    b.Property<double>("RawString")
                        .HasColumnType("float")
                        .HasColumnName("raw_string");

                    b.Property<string>("ReferenceCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reference_code");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("transaction_date");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transaction_id");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.Property<string>("WalletId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("wallet_id");

                    b.HasKey("Id")
                        .HasName("pk_raw_transactions");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_raw_transactions_id");

                    b.ToTable("raw_transactions", (string)null);
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<double?>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<string>("Deleted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deleted");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<double?>("Fees")
                        .HasColumnType("float")
                        .HasColumnName("fees");

                    b.Property<Guid?>("FeesCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fees_category_id");

                    b.Property<Guid?>("FromPaymentAccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("from_payment_account_id");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_url");

                    b.Property<bool?>("IsReport")
                        .HasColumnType("bit")
                        .HasColumnName("is_report");

                    b.Property<Guid?>("ToPaymentAccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("to_payment_account_id");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float")
                        .HasColumnName("total_amount");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("transaction_date");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_transactions");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_transactions_category_id");

                    b.HasIndex("FeesCategoryId")
                        .HasDatabaseName("ix_transactions_fees_category_id");

                    b.HasIndex("FromPaymentAccountId")
                        .HasDatabaseName("ix_transactions_from_payment_account_id");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_transactions_id");

                    b.HasIndex("ToPaymentAccountId")
                        .HasDatabaseName("ix_transactions_to_payment_account_id");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.TransactionCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<string>("Deleted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deleted");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("type_id");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_transaction_categories");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_transaction_categories_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_transaction_categories_parent_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_transaction_categories_type_id");

                    b.ToTable("transaction_categories", (string)null);
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.TransactionCategoryType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<string>("Deleted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deleted");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_transaction_category_types");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_transaction_category_types_id");

                    b.ToTable("transaction_category_types", (string)null);
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.Identities.RoleClaim", b =>
                {
                    b.HasOne("PersonalFinancialManagement.Models.Entities.Identities.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.Identities.UserClaim", b =>
                {
                    b.HasOne("PersonalFinancialManagement.Models.Entities.Identities.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.Identities.UserLogin", b =>
                {
                    b.HasOne("PersonalFinancialManagement.Models.Entities.Identities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.Identities.UserRole", b =>
                {
                    b.HasOne("PersonalFinancialManagement.Models.Entities.Identities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("PersonalFinancialManagement.Models.Entities.Identities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.Identities.UserToken", b =>
                {
                    b.HasOne("PersonalFinancialManagement.Models.Entities.Identities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.PaymentAccount", b =>
                {
                    b.HasOne("PersonalFinancialManagement.Models.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk_payment_accounts_currencies_currency_id");

                    b.HasOne("PersonalFinancialManagement.Models.Entities.PaymentAccountType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .HasConstraintName("fk_payment_accounts_payment_account_types_type_id");

                    b.Navigation("Currency");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.Transaction", b =>
                {
                    b.HasOne("PersonalFinancialManagement.Models.Entities.TransactionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_transactions_transaction_categories_category_id");

                    b.HasOne("PersonalFinancialManagement.Models.Entities.TransactionCategory", "FeesCategory")
                        .WithMany()
                        .HasForeignKey("FeesCategoryId")
                        .HasConstraintName("fk_transactions_transaction_categories_fees_category_id");

                    b.HasOne("PersonalFinancialManagement.Models.Entities.PaymentAccount", "FromPaymentAccount")
                        .WithMany()
                        .HasForeignKey("FromPaymentAccountId")
                        .HasConstraintName("fk_transactions_payment_accounts_from_payment_account_id");

                    b.HasOne("PersonalFinancialManagement.Models.Entities.PaymentAccount", "ToPaymentAccount")
                        .WithMany()
                        .HasForeignKey("ToPaymentAccountId")
                        .HasConstraintName("fk_transactions_payment_accounts_to_payment_account_id");

                    b.Navigation("Category");

                    b.Navigation("FeesCategory");

                    b.Navigation("FromPaymentAccount");

                    b.Navigation("ToPaymentAccount");
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.TransactionCategory", b =>
                {
                    b.HasOne("PersonalFinancialManagement.Models.Entities.TransactionCategory", "Parent")
                        .WithMany("Childrens")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_transaction_categories_transaction_categories_parent_id");

                    b.HasOne("PersonalFinancialManagement.Models.Entities.TransactionCategoryType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .HasConstraintName("fk_transaction_categories_transaction_category_types_type_id");

                    b.Navigation("Parent");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.Identities.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.Identities.User", b =>
                {
                    b.Navigation("UserClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("PersonalFinancialManagement.Models.Entities.TransactionCategory", b =>
                {
                    b.Navigation("Childrens");
                });
#pragma warning restore 612, 618
        }
    }
}
